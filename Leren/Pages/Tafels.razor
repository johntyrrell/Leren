@page "/tafels"
@using System.Timers;

<PageTitle>Tafels</PageTitle>

@if (!IsAanHetRekenen && !IsAanHetControleren)
{
    <div>
        @foreach (var tafelSelectie in MogelijkeTafels)
        {
            <input type="checkbox" @bind-value="tafelSelectie.IsSelected"><span>&nbsp; De tafel van @tafelSelectie.Getal</span><br/>
        }
    </div>
    <button @onclick="Start">Start</button>
}
else if (!IsAanHetControleren)
{
    <h1>@Som</h1>

    <input type="number" @bind-value="GegevenAntwoord" @ref="AntwoordInput"></input>

    <br/>
    <button @onclick="Check">Controleren</button>

    if (_timer.Enabled)
    {
        <p>
            <span>Nog @CountDown seconden</span>
        </p>
    }
}
else
{
    <h1>@Som</h1>

    <h2>@GegevenAntwoord</h2>

    @if (GegevenAntwoord == Antwoord)
    {
        <p>Je hebt het goed!</p>
    }
    else
    {
        <p>Helaas het antwoord is @Antwoord</p>
    }

    <button @onclick="Volgende">Volgende</button>
}

@if (IsAanHetRekenen)
{
    <div>
        <table>
            <tr>
                <td>Aantal goed</td>
                <td>@AantalGoed</td>
            </tr>
            <tr>
                <td>Aantal fout</td>
                <td>@AantalFout</td>
            </tr>
        </table>
    </div>
}

@code {
    private ElementReference AntwoordInput;
    private Random _random = new Random();
    private bool IsAanHetRekenen { get; set; }
    private bool IsAanHetControleren { get; set; }
    private List<TafelSelectie> MogelijkeTafels { get; set; } = new();
    private int AantalGoed { get; set; }
    private int AantalFout { get; set; }
    private string Som { get; set; } = string.Empty;
    private int Antwoord { get; set; }
    private int GegevenAntwoord { get; set; }
    private System.Timers.Timer _timer = new();
    private int CountDown { get; set; }

    protected override Task OnInitializedAsync()
    {
        MogelijkeTafels = Enumerable.Range(0, 10).Select(i => new TafelSelectie { Getal = i }).ToList();
        _timer.Interval = 1_000;
        _timer.Enabled = false;
        _timer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
       {
           CountDown--;
           if (CountDown == 0)
           {
               Check();
           }
           await InvokeAsync(StateHasChanged);
       };
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsAanHetRekenen && !IsAanHetControleren)
        {
            await AntwoordInput.FocusAsync();
        }
    }

    private void Start()
    {
        IsAanHetRekenen = true;
        AantalGoed = 0;
        AantalFout = 0;
        Volgende();
    }

    private void Volgende()
    {
        GegevenAntwoord = 0;
        var alleTafels = MogelijkeTafels.Where(m => m.IsSelected).ToList();
        var tafel = alleTafels[_random.Next(alleTafels.Count)];
        var getal = _random.Next(10);
        Antwoord = getal * tafel.Getal;
        Som = $"{getal} x {tafel.Getal}";

        IsAanHetControleren = false;
        CountDown = 15;
        _timer.Enabled = true;
    }

    private void Check()
    {
        _timer.Enabled = false;
        IsAanHetControleren = true;
        if (GegevenAntwoord == Antwoord)
        {
            AantalGoed++;
        }
        else
        {
            AantalFout++;
        }
    }

    public class TafelSelectie
    {
        public bool IsSelected { get; set; }

        public int Getal { get; set; }

    }
}
